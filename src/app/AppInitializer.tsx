// src/app/AppInitializer.tsx
import { useEffect, useRef } from "react";
import { useLaunchParams, useRawInitData, isColorDark, isRGB } from "@telegram-apps/sdk-react";
import { useAuthStore } from "../store/authStore";
import { authenticateUser, verifyAndFetchUser } from "../lib/api/authService";
import { useSettingsStore, type ColorScheme, type Language } from "../store/settingsStore";
import AppLoader from "./AppLoader";

export const AppInitializer = ({ children }: { children: React.ReactNode }) => {
  const { accessToken, login, logout, setLoading, isLoading, profile } = useAuthStore();
  const { initializeSettings } = useSettingsStore();
  const launchParams = useLaunchParams();
  const user = launchParams.tgWebAppData?.user;
  const rawInitData = useRawInitData();
  
  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
  const initializationStarted = useRef(false);

  useEffect(() => {
    // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (initializationStarted.current) {
      console.log("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ");
      return;
    }

    // –ñ–¥–µ–º, –ø–æ–∫–∞ SDK –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
    if (!rawInitData || !user) {
      console.log("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SDK...");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –Ω–∞–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
    // 1. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ - —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–∞
    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –Ω–æ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –Ω—É–∂–Ω–∞ (—Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —Ç–æ–∫–µ–Ω, –∏ –ø—Ä–æ—Ñ–∏–ª—å - –Ω–µ –Ω—É–∂–Ω–∞
    const needsInitialization = !accessToken || !profile;
    
    if (!needsInitialization) {
      console.log("‚è≠Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞: —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
      setLoading(false);
      return;
    }

    console.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {
      hasToken: !!accessToken,
      hasProfile: !!profile,
      reason: !accessToken ? "–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞" : "–Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è"
    });
    
    initializationStarted.current = true;

    const startup = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Telegram
        const tgLanguage = (user as { languageCode?: string })?.languageCode;
        
        let tgColorScheme: ColorScheme = 'light'; // Default to light
        const bgColor = launchParams.tgWebAppThemeParams?.bg_color;
        if (bgColor && isRGB(bgColor) && isColorDark(bgColor)) {
          tgColorScheme = 'dark';
        }

        const initialLanguage: Language = tgLanguage === 'ru' ? 'ru' : 'en';
        const initialColorScheme: ColorScheme = tgColorScheme;

        console.log("üé® –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Telegram:", { 
          tgLanguage, 
          tgColorScheme, 
          initialLanguage, 
          initialColorScheme 
        });

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (accessToken) {
          try {
            console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω...");
            const backendData = await verifyAndFetchUser();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±—ç–∫–µ–Ω–¥–∞
            const backendLanguage = backendData.settings.languageCode as Language || initialLanguage;
            const backendColorScheme = backendData.settings.colorScheme as ColorScheme || initialColorScheme;
            
            console.log("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±—ç–∫–µ–Ω–¥–∞:", { 
              backendLanguage, 
              backendColorScheme,
              backendSettings: backendData.settings
            });
            
            initializeSettings(backendLanguage, backendColorScheme);
            login(accessToken, user, backendData);
            console.log("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
            return;
          } catch (error) {
            console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥:", error);
            logout();
          }
        }

        // –ù–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        console.log("üîë –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...");
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Telegram
        initializeSettings(initialLanguage, initialColorScheme);
        
        const authData = await authenticateUser(rawInitData, launchParams);
        
        // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è —Å —Ç–æ–∫–µ–Ω–æ–º
        login(authData.accessToken, user, null);
        
        // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const backendData = await verifyAndFetchUser();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–µ–Ω–¥–∞
        const backendLanguage = backendData.settings.languageCode as Language || initialLanguage;
        const backendColorScheme = backendData.settings.colorScheme as ColorScheme || initialColorScheme;
        
        initializeSettings(backendLanguage, backendColorScheme);
        login(authData.accessToken, user, backendData);
        
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö");
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const initialLanguage: Language = (user as { languageCode?: string })?.languageCode === 'ru' ? 'ru' : 'en';
        const initialColorScheme: ColorScheme = 'dark';
        initializeSettings(initialLanguage, initialColorScheme);
        setLoading(false);
      } finally {
        initializationStarted.current = false;
      }
    };

    startup();
  }, [
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ
    rawInitData, 
    user?.id, // –¢–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    accessToken, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    profile // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
  ]);

  if (isLoading) {
    return (
      <div className="flex h-[80vh] w-full items-center justify-center">
        <AppLoader />
      </div>
    );
  }

  return <>{children}</>;
};