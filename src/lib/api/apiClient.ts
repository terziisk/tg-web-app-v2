// src/lib/api/apiClient.ts
import axios, { type InternalAxiosRequestConfig } from 'axios';
import { jwtDecode } from 'jwt-decode';
import { useAuthStore } from '../../store/authStore';
import { retrieveLaunchParams, retrieveRawInitData } from '@telegram-apps/sdk-react';
import { authenticateUser } from './authService';

interface QueuedRequestCallbacks {
  onSuccess: (token: string) => void;
  onFailure: (error: Error) => void;
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
let isRefreshing = false;
let failedQueue: QueuedRequestCallbacks[] = [];

const processQueue = (error: Error | null, token: string | null = null) => {
  failedQueue.forEach(callbacks => {
    if (error) {
      callbacks.onFailure(error);
    } else {
      callbacks.onSuccess(token!);
    }
  });
  failedQueue = [];
};

const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL,
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
apiClient.interceptors.request.use(
  async (config: InternalAxiosRequestConfig) => {
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –ª–æ–≥–∏–Ω
    if (config.url?.endsWith('/auth/login')) {
      return config;
    }

    const { accessToken, login, logout } = useAuthStore.getState();

    if (!accessToken) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞");
      return config;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –≤ 30 —Å–µ–∫—É–Ω–¥)
    const decodedToken = jwtDecode<{ exp: number }>(accessToken);
    const bufferTime = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const isExpired = (decodedToken.exp * 1000) < (Date.now() + bufferTime);

    if (!isExpired) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      config.headers.Authorization = `Bearer ${accessToken}`;
      return config;
    }

    console.log("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...");

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
    if (isRefreshing) {
      console.log("‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∏–¥–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å");
      return new Promise((resolve, reject) => {
        failedQueue.push({
          onSuccess: (token: string) => {
            config.headers.Authorization = `Bearer ${token}`;
            resolve(config);
          },
          onFailure: (error: Error) => {
            reject(error);
          },
        });
      });
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    isRefreshing = true;
    console.log("üîë –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...");

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const launchParams = retrieveLaunchParams();
      const rawInitData = await retrieveRawInitData();

      if (!rawInitData) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å initData –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.");
      }
      
      const { accessToken: newAccessToken } = await authenticateUser(rawInitData, launchParams);
      const { user, profile } = useAuthStore.getState();

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ—Ä–µ
      login(newAccessToken, user, profile);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
      config.headers.Authorization = `Bearer ${newAccessToken}`;
      
      console.log("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      processQueue(null, newAccessToken);
      return config;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      processQueue(error as Error, null);
      logout();
      return Promise.reject(error);
    } finally {
      isRefreshing = false;
    }
  },
  (error) => {
    return Promise.reject(error);
  }
);

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    // –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º 401 –æ—à–∏–±–∫–∏, –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–π
    // (—Ç–∞–∫ –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ request interceptor)
    if (error.response?.status === 401) {
      console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 401 –æ—Ç–≤–µ—Ç:", error.config?.url);
    }
    return Promise.reject(error);
  }
);

export default apiClient;